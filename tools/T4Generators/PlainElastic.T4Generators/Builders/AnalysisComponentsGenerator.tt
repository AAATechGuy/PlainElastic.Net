<#@ assembly name="System.Core" #>
<#@ assembly name="$(ProjectDir)\bin\PlainElastic.T4Generators.dll" #>

<#@ import namespace="System.IO" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="Microsoft.VisualStudio.TextTemplating" #>
<#@ import namespace="PlainElastic.T4Generators.Models" #>
<#@ import namespace="PlainElastic.T4Generators.Utils" #>

<#@ include file="AnalysisComponentTemplate.tt" #>
<#@ include file="AnalysisComponentEmptyTestTemplate.tt" #>
<#@ include file="AnalysisComponentCompleteTestTemplate.tt" #>
<#@ include file="AnalysisSettingsTemplate.tt" #>
<#@ include file="AnalysisSettingsEmptyTestTemplate.tt" #>
<#@ include file="AnalysisSettingsCompleteTestTemplate.tt" #>

<#+
public class AnalysisComponentsGenerator : Generator
{
    public AnalysisComponentsGenerator(ITextTemplatingEngineHost host, AnalysisViewSettings settings)
    {
        Host = host;
        Settings = settings;
    }

    public ITextTemplatingEngineHost Host { get; private set; }
    public AnalysisViewSettings Settings { get; private set; }

    protected override void RunCore()
    {
        var metadataFolder = Path.Combine(Path.GetDirectoryName(Host.TemplateFile), "Metadata");
        var metadataViews = MetadataHelper.LoadComponentsMetadata(metadataFolder)
                                .Select(m => new ComponentMetadataView(m, Settings)).ToList();

        foreach (var metadataView in metadataViews)
        {
            var template = new AnalysisComponentTemplate(metadataView);
            RenderCodeTemplate(metadataView.ClassName, template);

            var emptyTestClassName = GetEmptyTestClassName(metadataView.ClassName);
            var emptyTestTemplate = new AnalysisComponentEmptyTestTemplate(emptyTestClassName, metadataView);
            RenderCodeTemplate(emptyTestClassName, emptyTestTemplate);

            var completeTestClassName = GetCompleteTestClassName(metadataView.ClassName);
            var completeTestTemplate = new AnalysisComponentCompleteTestTemplate(completeTestClassName, metadataView);
            RenderCodeTemplate(completeTestClassName, completeTestTemplate);
        }

        var settingsTemplate = new AnalysisSettingsTemplate(metadataViews, Settings);
        RenderCodeTemplate(Settings.SettingsClassName, settingsTemplate);

        var settingsEmptyTestClassName = GetEmptyTestClassName(Settings.SettingsClassName);
        var settingsEmptyTestTemplate = new AnalysisSettingsEmptyTestTemplate(settingsEmptyTestClassName, Settings);
        RenderCodeTemplate(settingsEmptyTestClassName, settingsEmptyTestTemplate);

        var settingsCompleteTestClassName = GetCompleteTestClassName(Settings.SettingsClassName);
        var settingsCompleteTestTemplate = new AnalysisSettingsCompleteTestTemplate(settingsCompleteTestClassName, metadataViews, Settings);
        RenderCodeTemplate(settingsCompleteTestClassName, settingsCompleteTestTemplate);
    }

    private static string GetEmptyTestClassName(string testedClassName)
    {
        return string.Format("When_empty_{0}_built", testedClassName);
    }

    private static string GetCompleteTestClassName(string testedClassName)
    {
        return string.Format("When_complete_{0}_built", testedClassName);
    }

    private static void RenderCodeTemplate(string fileName, Template template)
    {
        template.Output.BuildAction = "None";
        template.RenderToFile(fileName + ".cs");
    }
}

#>